@Scheduled(cron="0/10 * * * * *") //10초마다 실행 (테스트용)
	public void roomScheduler() throws Exception, ApiException {
		
		HashMap<String, Object> dbMap = new HashMap<String, Object>();
		//
		/*------------------------------------------------------------------------------------------------------------
		 * 전일 종료된 회의 목록 조회
		 *------------------------------------------------------------------------------------------------------------*/
		Calendar calendar = new GregorianCalendar();
    	//
    	List<RoomDto> RegularEndRoom= roomMapper.getLastEndRoom(dbMap);
    	//
		/*------------------------------------------------------------------------------------------------------------
		 * 정기회의 방정보 수정 세팅
		 *------------------------------------------------------------------------------------------------------------*/
    	int lastRoom = RegularEndRoom.size();
    	Date now = new Date();
    	String pattern = "yyyyMMdd";
    	String pattern2 = "yyyy-MM-dd HH:mm:ss";
    	SimpleDateFormat sDF = new SimpleDateFormat(pattern);
    	SimpleDateFormat sDF2 = new SimpleDateFormat(pattern2);
    	Date nowTime = sDF.parse(sDF.format(now.getTime()));
    	Calendar cal = Calendar.getInstance();
    	//
    	HashMap<String, Object> regularMap = new HashMap<String, Object>();
    	for(int i = 0; i<lastRoom; i++) {
			String roomCode = RegularEndRoom.get(i).getRoomCode();
			String startDt = RegularEndRoom.get(i).getStartDt();
			String endDt = RegularEndRoom.get(i).getEndDt();
			Date newStartDt= sDF2.parse(startDt);
			Date newEndDt= sDF2.parse(endDt);
			regularMap.put("roomCode", roomCode);
			RegularDto regularEndInfo = roomMapper.getRegularInfo(regularMap);
			//
			/*------------------------------------------------------------------------------------------------------------
			 * 정기회의 종료시점이 지난 경우 정기회의 종료
			 *------------------------------------------------------------------------------------------------------------*/
			if(!"00".equals(regularEndInfo.getRepeatEndChk())) {
				Date endDate = null;
				if("01".equals(regularEndInfo.getRepeatEndChk())) {
					endDate = sDF.parse(regularEndInfo.getRepeatEndDate());
					if(true==nowTime.after(endDate)) {
						regularMap.put("regularYn", "N");
		    			int autoUpdate = roomMapper.autoUpdateRoom(regularMap);
		    			if(0<autoUpdate) {
		    				// 정기회의 테이블에서 삭제 
	//	    				roomMapper.delRegular(regularMap);
		    			}
					}
				} else if("02".equals(regularEndInfo.getRepeatEndChk())) {
					if(0>=regularEndInfo.getRepeatEndCount()) {
		    			regularMap.put("regularYn", "N");
		    			int autoUpdate = roomMapper.autoUpdateRoom(regularMap);
		    			if(0<autoUpdate) {
		    				// 정기회의 테이블에서 삭제 
	//	    				roomMapper.delRegular(regularMap);
		    			}
					}
				}
			}
		}
		//
    	List<RoomDto> lastEndRoom= roomMapper.getLastEndRoom(dbMap);
    	for(int i = 0; i<lastRoom; i++) {
    		String roomCode = lastEndRoom.get(i).getRoomCode();
    		String startDt = lastEndRoom.get(i).getStartDt();
    		String endDt = lastEndRoom.get(i).getEndDt();
    		Date newStartDt= sDF2.parse(startDt);
    		Date newEndDt= sDF2.parse(endDt);
    		regularMap.put("roomCode", roomCode);
    		RegularDto regularInfo = roomMapper.getRegularInfo(regularMap);
    		int repeatNum = regularInfo.getRepeatNum();
    		/*------------------------------------------------------------------------------------------------------------
    		 * 반복주기가 주(01)인 경우 수정
    		 *------------------------------------------------------------------------------------------------------------*/
    		if("01".equals(regularInfo.getRepeatWeek())) {
    			//
    			calendar.setTime(nowTime);
    			calendar.add(Calendar.DATE, -1);
				int dayOfWeekNumber = calendar.get(calendar.DAY_OF_WEEK);
				regularMap.clear();
				regularMap.put("todayOfWeek", dayOfWeekNumber);
				//
    			String strDay = regularInfo.getWeekYn();
        		String newStrDay = "";
        		int intDay = 0;
        		int intToday = Integer.valueOf(String.valueOf(regularMap.get("todayOfWeek")));
        		int addDay = 0;
        		int reNum = 0;
        		for(int j = 0; j < strDay.length() ; j++) {
        			System.out.println("하나씩 자른 것들이 Y 혹은 N으로 나타난다 : " + strDay.charAt(j));
        			if("Y".equals(String.valueOf(strDay.charAt(j)))) {
    	    			intDay = j+1;
    	    			System.out.println("하나씩 자른 것들이 숫자로 나타난다 : " + intDay);
    	    			newStrDay = newStrDay + String.valueOf(intDay);
    	    			if(intDay>=intToday) {
    	    				addDay = intDay - intToday;
    	    				System.out.println("며칠을 더할지 나타낸다. : " + addDay);
    	    			}
    	    			continue;
        			} else {
        				intDay = 0;
//        				System.out.println("N일 경우 0으로 나타난다 : " + intDay);
        				newStrDay = newStrDay + String.valueOf(intDay);
        			}
        			System.out.println("Y면 숫자로 표현한 거 : " + newStrDay);
        			}
        		System.out.println("더해야 할 날 : " + addDay);
        		regularMap.clear();
        		if(addDay==0) {
        			reNum = (repeatNum-1)*7;
    				for(int k = 0; k < newStrDay.length() ; k++) {
    					if(!"0".equals(String.valueOf(newStrDay.charAt(k)))) {
    						intDay = k+1;
    						addDay = intDay + (7-intToday) + reNum;
    						continue;
    					}
    				}
        		}
        		System.out.println("이번주에 더할 날이 없을때 더해야 할 날 : " + addDay);
        		Date tempStDt = sDF2.parse(startDt);
        		System.out.println("회의 기존 시작 날짜 : " + startDt);
        		System.out.println("회의 기존 시작 날짜 : " + tempStDt);
        		Date tempEnDt = sDF2.parse(endDt);
        		System.out.println("회의 기존 종료 날짜 : " + tempEnDt);
        		Date TodayDt = sDF2.parse(sDF2.format(now.getTime()));
        		System.out.println("오늘 날짜 : " + TodayDt);
        		
        		Calendar newCal = Calendar.getInstance();
        		System.out.println("calendar를 탔는데 이것도 제시간으로 나오나 : " + newCal.getTime());
        		newCal.add(Calendar.DATE, -1);
    			Date YestDay = sDF2.parse(sDF2.format(newCal.getTime()));
        		long stDt = YestDay.getTime() - tempStDt.getTime();
        		long enDt = tempEnDt.getTime() - tempStDt.getTime();
        		int btwSt = (int)stDt/(24*60*60*1000) + 1;
        		System.out.println("종료와 지금의 차이인 종료시간 : " + btwSt);
        		int btwEn = (int)enDt/(24*60*60*1000);
        		System.out.println("종료와 시작의 차이인 종료시간 : " + btwEn);
        		//
				cal.setTime(newStartDt);
				cal.add(Calendar.DATE, addDay+btwSt);
				regularMap.put("startDt", sDF2.format(cal.getTime()));
				cal.setTime(newEndDt);
				cal.add(Calendar.DATE, addDay+btwSt);
				regularMap.put("endDt", sDF2.format(cal.getTime()));
				regularMap.put("roomCode", roomCode);
				//
	    		if("02".equals(regularInfo.getRepeatEndChk())) {
	    			//count-1
	    			int endCount = regularInfo.getRepeatEndCount()-1;
	    		}
    		//
    		/*------------------------------------------------------------------------------------------------------------
    		 * 반복주기가 월(02), 년(03)인 경우 수정
    		 *------------------------------------------------------------------------------------------------------------*/
    		} else {
    				//반복코드가 월일 경우
    			regularMap.put("startDt", startDt);
    			Date DateStartDt = sDF2.parse(String.valueOf(regularMap.get("startDt")));
    				//월인 경우
    				if("02".equals(regularInfo.getRepeatWeek())) {
						cal.setTime(nowTime);
						int nowYear = cal.get(Calendar.YEAR);
						int nowMonth = cal.get(Calendar.MONTH);
						//
    					regularMap.clear();
						cal.setTime(newStartDt);
						int startYear = cal.get(Calendar.YEAR);
						int startMonth = cal.get(Calendar.MONTH);
						int addSYear = nowYear - startYear;
						int addSBetwn = nowMonth - startMonth;
						int addSMon = addSBetwn + (repeatNum-(addSBetwn%repeatNum));
						cal.add(Calendar.YEAR, addSYear);
						cal.add(Calendar.MONTH, addSMon);
						regularMap.put("startDt", sDF2.format(cal.getTime()));
						//
						cal.setTime(newEndDt);
						int endYear = cal.get(Calendar.YEAR);
						int endMonth = cal.get(Calendar.MONTH);
						int addEYear = nowYear - endYear;
						int addEBetwn = nowMonth - endMonth;
						int addEMon = addEBetwn + (repeatNum-(addEBetwn%repeatNum));
						cal.add(Calendar.YEAR, addEYear);
						cal.add(Calendar.MONTH, addEMon);
						regularMap.put("endDt", sDF2.format(cal.getTime()));
						regularMap.put("roomCode", roomCode);
					// 반복코드가 년인 경우
    				} else if("03".equals(regularInfo.getRepeatWeek())) {
    					cal.setTime(nowTime);
						int nowYear = cal.get(Calendar.YEAR);
						//
    					regularMap.clear();
						cal.setTime(newStartDt);
						int startYear = cal.get(Calendar.YEAR);
						int addSBetwn = nowYear - startYear;
						int addSYear = addSBetwn + (repeatNum-(addSBetwn%repeatNum));
						cal.add(Calendar.YEAR, addSYear);
						regularMap.put("startDt", sDF2.format(cal.getTime()));
						//
						cal.setTime(newEndDt);
						int endYear = cal.get(Calendar.YEAR);
						int addEBetwn = nowYear - endYear;
						int addEYear = addEBetwn + (repeatNum-(addEBetwn%repeatNum));
						cal.add(Calendar.YEAR, addEYear);
						regularMap.put("endDt", sDF2.format(cal.getTime()));
						regularMap.put("roomCode", roomCode);
    				}
    			//종료가 횟수로 되어있을 경우
				if("02".equals(regularInfo.getRepeatEndChk())) {
    				//count-1
    				int endCount = regularInfo.getRepeatEndCount()-1;
    				regularMap.put("repeatEndCount", endCount);
    				System.out.println("정기회의 정기횟수 차감 : " + regularMap.get("repeatEndCount"));
//    				int updateRegular = roomMapper.updateRegular(regularMap);
				}
    		}
    		regularMap.put("roomStatus", "01");
    		System.out.println("한 방당 입력될 맵 : " + regularMap);
//    		int updateRoom = roomMapper.autoUpdateRoom(regularMap);
    	}
	}
