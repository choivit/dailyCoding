@Scheduled(cron="0/10 * * * * *") 
	public void roomScheduler() throws Exception, ApiException {
		
		HashMap<String, Object> dbMap = new HashMap<String, Object>();
		//
		/*------------------------------------------------------------------------------------------------------------
		 * 전일 종료된 회의 목록 조회
		 *------------------------------------------------------------------------------------------------------------*/
		Calendar calendar = new GregorianCalendar();
    	//
		Date now = new Date();
		String pattern = "yyyyMMdd";
		String pattern2 = "yyyy-MM-dd HH:mm:ss";
		SimpleDateFormat sDF = new SimpleDateFormat(pattern);
		SimpleDateFormat sDF2 = new SimpleDateFormat(pattern2);
		String tempnow = sDF.format(now.getTime());
		dbMap.put("nowTime", tempnow);
    	List<RoomDto> RegularEndRoom= roomMapper.getLastEndRoom(dbMap);
    	//
		/*------------------------------------------------------------------------------------------------------------
		 * 정기회의 방정보 수정 세팅
		 *------------------------------------------------------------------------------------------------------------*/
    	int lastRoom = RegularEndRoom.size();
    	Date nowTime = sDF.parse(sDF.format(now.getTime()));
    	Calendar cal = Calendar.getInstance();
    	HashMap<String, Object> regularMap = new HashMap<String, Object>();
    	//
    	if(lastRoom>0) {
	    	loop1 : for(int i = 0; i<lastRoom; i++) {
				String roomCode = RegularEndRoom.get(i).getRoomCode();
				String startDt = RegularEndRoom.get(i).getStartDt();
				String endDt = RegularEndRoom.get(i).getEndDt();
				Date newStartDt= sDF2.parse(startDt);
				Date newEndDt= sDF2.parse(endDt);
				regularMap.put("roomCode", roomCode);
				RegularDto regularEndInfo = roomMapper.getRegularInfo(regularMap);
				if(regularEndInfo==null) {
					continue loop1;
				}else {
				//
				/*------------------------------------------------------------------------------------------------------------
				 * 정기회의 종료시점이 지난 경우 정기회의 종료
				 *------------------------------------------------------------------------------------------------------------*/
					if(!"00".equals(regularEndInfo.getRepeatEndChk())) {
						Date endDate = null;
						if("01".equals(regularEndInfo.getRepeatEndChk())) {
							endDate = sDF.parse(regularEndInfo.getRepeatEndDate());
							if(true==nowTime.after(endDate)) {
								regularMap.put("regularYn", "N");
				    			int autoUpdate = roomMapper.autoUpdateRoom(regularMap);
				    			if(0<autoUpdate) {
				    				roomMapper.delRegular(regularMap);
				    			}
							}
						} else if("02".equals(regularEndInfo.getRepeatEndChk())) {
							if(0==regularEndInfo.getRepeatEndCount()) {
				    			regularMap.put("regularYn", "N");
				    			int autoUpdate = roomMapper.autoUpdateRoom(regularMap);
				    			if(0<autoUpdate) {
				    				roomMapper.delRegular(regularMap);
				    			}
							}
						}
					}
				}
			}
    	}
		//
    	List<RoomDto> lastEndRoom= roomMapper.getLastEndRoom(dbMap);
    	int udtRegNum = lastEndRoom.size();
    	if(udtRegNum>0) {
	    	loop2 : for(int i = 0; i<udtRegNum; i++) {
	    		String roomCode = lastEndRoom.get(i).getRoomCode();
	    		String startDt = lastEndRoom.get(i).getStartDt();
	    		String endDt = lastEndRoom.get(i).getEndDt();
	    		regularMap.put("roomCode", roomCode);
	    		RegularDto regularInfo = roomMapper.getRegularInfo(regularMap);
	    		if(regularInfo==null) {
	    			continue loop2;
	    		}else {
		    		Date newStartDt= sDF2.parse(startDt);
		    		Date newEndDt= sDF2.parse(endDt);
		    		int repeatNum = regularInfo.getRepeatNum();
		    		/*------------------------------------------------------------------------------------------------------------
		    		 * 반복주기가 주(01)인 경우 수정
		    		 *------------------------------------------------------------------------------------------------------------*/
		    		if("01".equals(regularInfo.getRepeatWeek())) {
		    			//
		    			calendar.setTime(nowTime);
		    			calendar.add(Calendar.DATE, -1);
						int dayOfWeekNumber = calendar.get(calendar.DAY_OF_WEEK);
						regularMap.clear();
						regularMap.put("todayOfWeek", dayOfWeekNumber);
						//
		    			String strDay = regularInfo.getWeekYn();
		        		String newStrDay = "";
		        		int intDay = 0;
		        		int intToday = Integer.valueOf(String.valueOf(regularMap.get("todayOfWeek")));
		        		int addDay = 0;
		        		int reNum = 0;
		        		for(int j = 0; j < strDay.length() ; j++) {
		        			if("Y".equals(String.valueOf(strDay.charAt(j)))) {
		    	    			intDay = j+1;
		    	    			newStrDay = newStrDay + String.valueOf(intDay);
		    	    			if(intDay>=intToday) {
		    	    				addDay = intDay - intToday;
		    	    			}
		    	    			continue;
		        			} else {
		        				intDay = 0;
		        				newStrDay = newStrDay + String.valueOf(intDay);
		        			}
		    			}
		        		regularMap.clear();
		        		if(addDay==0) {
		        			reNum = (repeatNum-1)*7;
		    				for(int k = 0; k < newStrDay.length() ; k++) {
		    					if(!"0".equals(String.valueOf(newStrDay.charAt(k)))) {
		    						intDay = k+1;
		    						addDay = intDay + (7-intToday) + reNum;
		    						continue;
		    					}
		    				}
		        		}
		        		
		        		Date tempStDt = sDF2.parse(startDt);
		        		Date tempEnDt = sDF2.parse(endDt);
		        		long btwTDt = tempEnDt.getTime() - tempStDt.getTime();
		        		int btwDt = (int)(btwTDt/(24 * 60 * 60 * 1000));
		        		System.out.println("회의시간 일수차 : " + btwDt);
		        		//
		        		cal.setTime(tempStDt);
		        		System.out.println("회의 시작시간 : " + cal.getTime());
		        		int StartH = cal.get(calendar.HOUR_OF_DAY);
		        		System.out.println("회의 시작HOUR : " + StartH);
		        		int StartM = cal.get(calendar.MINUTE);
		        		System.out.println("회의 시작MINUTE : " + StartM);
		        		int StartS = cal.get(calendar.SECOND);
		        		System.out.println("회의 시작SECOND : " + StartS);
		        		Calendar newSCal = Calendar.getInstance();
		        		newSCal.setTime(sDF.parse(tempnow));
		        		System.out.println("날짜만 나와야 하는 현재 시간" + newSCal.getTime());
		        		newSCal.add(Calendar.DATE, -1);
		        		System.out.println("어제 일수 : " + newSCal.getTime());
		        		newSCal.add(calendar.HOUR, StartH);
		        		newSCal.add(calendar.MINUTE, StartM);
		        		newSCal.add(calendar.SECOND, StartS);
		        		System.out.println("오늘 날짜에 시간을 더한 것 : " + newSCal.getTime());
		        		newSCal.add(Calendar.DATE, addDay);
		        		System.out.println("오늘 날짜에 시간과 날짜를 더한 것 : " + newSCal.getTime());
						regularMap.put("startDt", sDF2.format(newSCal.getTime()));
						//
						cal.setTime(tempEnDt);
						System.out.println("회의 종료시간 : " + cal.getTime());
		        		int EndH = cal.get(calendar.HOUR_OF_DAY);
		        		System.out.println("회의 종료HOUR : " + EndH);
		        		int EndM = cal.get(calendar.MINUTE);
		        		System.out.println("회의 종료MINUTE : " + EndM);
		        		int EndS = cal.get(calendar.SECOND);
		        		System.out.println("회의 종료SECOND : " + EndS);
		        		Calendar newECal = Calendar.getInstance();
		        		newECal.setTime(sDF.parse(tempnow));
		        		newECal.add(Calendar.DATE, -1);
		        		System.out.println("어제 일수 : " + newECal.getTime());
		        		newECal.add(calendar.HOUR, EndH);
		        		newECal.add(calendar.MINUTE, EndM);
		        		newECal.add(calendar.SECOND, EndS);
		        		System.out.println("오늘 날짜에 시간을 더한 것 : " + newECal.getTime());
		        		newECal.add(Calendar.DATE, addDay+(int)btwDt);
						regularMap.put("endDt", sDF2.format(newECal.getTime()));
						regularMap.put("roomCode", roomCode);
						//
			    		if("02".equals(regularInfo.getRepeatEndChk())) {
			    			//count-1
			    			int endCount = regularInfo.getRepeatEndCount()-1;
			    		}
		    		//
		    		/*------------------------------------------------------------------------------------------------------------
		    		 * 반복주기가 월(02), 년(03)인 경우 수정
		    		 *------------------------------------------------------------------------------------------------------------*/
		    		} else {
		    			if("02".equals(regularInfo.getRepeatWeek())) {
							cal.setTime(nowTime);
							int nowYear = cal.get(Calendar.YEAR);
							int nowMonth = cal.get(Calendar.MONTH);
							//
	    					regularMap.clear();
							cal.setTime(newStartDt);
							int startYear = cal.get(Calendar.YEAR);
							int startMonth = cal.get(Calendar.MONTH);
							int addSYear = nowYear - startYear;
							int addSBetwn = nowMonth - startMonth;
							int addSMon = addSBetwn + (repeatNum-(addSBetwn%repeatNum));
							cal.add(Calendar.YEAR, addSYear);
							cal.add(Calendar.MONTH, addSMon);
							regularMap.put("startDt", sDF2.format(cal.getTime()));
							//
							cal.setTime(newEndDt);
							int endYear = cal.get(Calendar.YEAR);
							int endMonth = cal.get(Calendar.MONTH);
							int addEYear = nowYear - endYear;
							int addEBetwn = nowMonth - endMonth;
							int addEMon = addEBetwn + (repeatNum-(addEBetwn%repeatNum));
							cal.add(Calendar.YEAR, addEYear);
							cal.add(Calendar.MONTH, addEMon);
							regularMap.put("endDt", sDF2.format(cal.getTime()));
							regularMap.put("roomCode", roomCode);
	    				} else if("03".equals(regularInfo.getRepeatWeek())) {
	    					cal.setTime(nowTime);
							int nowYear = cal.get(Calendar.YEAR);
							//
	    					regularMap.clear();
							cal.setTime(newStartDt);
							int startYear = cal.get(Calendar.YEAR);
							int addSBetwn = nowYear - startYear;
							int addSYear = addSBetwn + (repeatNum-(addSBetwn%repeatNum));
							cal.add(Calendar.YEAR, addSYear);
							regularMap.put("startDt", sDF2.format(cal.getTime()));
							//
							cal.setTime(newEndDt);
							int endYear = cal.get(Calendar.YEAR);
							int addEBetwn = nowYear - endYear;
							int addEYear = addEBetwn + (repeatNum-(addEBetwn%repeatNum));
							cal.add(Calendar.YEAR, addEYear);
							regularMap.put("endDt", sDF2.format(cal.getTime()));
							regularMap.put("roomCode", roomCode);
	    				}
		    		}
		    		if("02".equals(regularInfo.getRepeatEndChk())) {
		    			//count-1
		    			int endCount = regularInfo.getRepeatEndCount()-1;
		    			regularMap.put("repeatEndCount", endCount);
		    			int updateRegular = roomMapper.updateEndCount(regularMap);
		    		}
		    		regularMap.put("roomStatus", "01");
		    		int updateRoom = roomMapper.autoUpdateRoom(regularMap);
	    		}
	    	}
    	}
	}
